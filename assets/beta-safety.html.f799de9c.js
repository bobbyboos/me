import{r as n,o as i,c as r,a as t,b as s,F as d,e as a,d as e}from"./app.0f507fb3.js";import{_ as h}from"./plugin-vue_export-helper.21dcd24c.js";const c={},l=a('<p>Beta Safety users will probably have noticed the very obvious similarities between Beta Protection and Beta Safety, and that&#39;s not a coincidence. Beta Protection (just like Beta Censoring) was borne out of using Beta Safety for a while but finding a lot of things I wanted to change and deciding to build my own vision of a censoring extension.</p><p>To reiterate from the introduction guide:</p><blockquote><p>If you&#39;re already using Beta Safety, you most likely already have the Beta Safety chrome extension installed. The extension that comes with Beta Safety is perfectly functional and if you&#39;re happy with it, there&#39;s no <em>need</em> to upgrade to Beta Protection.</p></blockquote><blockquote><p>Beta Protection is a more feature-rich, but also more complex, alternative to the extension that comes bundled with Beta Safety.</p></blockquote><h2 id="so-which-one-should-you-use" tabindex="-1"><a class="header-anchor" href="#so-which-one-should-you-use" aria-hidden="true">#</a> So which one should you use?</h2><p>To reiterate: the extension that comes with Beta Safety is perfectly fine. It generally works and is enough for most users.</p><p>Beta Protection introduces some new features and changes that <em>might</em> make it a better fit for you:</p><h3 id="improved-options-and-ui" tabindex="-1"><a class="header-anchor" href="#improved-options-and-ui" aria-hidden="true">#</a> Improved options and UI</h3><p>In this author&#39;s opinion, the original Beta Safety extension&#39;s options are a little too function-over-form and (as a consequence of how they&#39;re designed) can be a little daunting. Beta Protection aims to provide even more customization than Beta Safety but with a more approachable and understandable design.</p><h3 id="easier-customization" tabindex="-1"><a class="header-anchor" href="#easier-customization" aria-hidden="true">#</a> Easier customization</h3><p>Some parts of the original extension were a little more complex to set up than they needed to be. For example, adding new placeholders required you to directly mess around in the extension&#39;s installation directory, whereas Beta Protection allows you to import them directly to the extension where it&#39;s managed for you.</p><p>Plus, Beta Protection allows you to change some settings that Beta Safety didn&#39;t expose as options at all, like where your backend is running or what messages the subliminal messages feature would show.</p><h3 id="backend-choice" tabindex="-1"><a class="header-anchor" href="#backend-choice" aria-hidden="true">#</a> Backend Choice</h3>',13),u=e("Beta Protection is designed to work with any compatible censoring backend you like. Currently that includes "),f={href:"https://silveredgold.github.io/beta-censoring/",target:"_blank",rel:"noopener noreferrer"},p=e("Beta Censoring"),m=e(" and Beta Safety. Whichever backend you choose, and wherever it's running, Beta Protection doesn't mind."),g=a('<h3 id="local-censoring-improvements" tabindex="-1"><a class="header-anchor" href="#local-censoring-improvements" aria-hidden="true">#</a> Local censoring improvements</h3><p>While Beta Safety&#39;s backend can be used to censor locally saved images, it&#39;s not the most approachable process for most users and tweaking settings for local files is very daunting. Beta Protection includes a guided wizard for censoring your local files, with options to tweak the censoring applied to the files, regardless of whether you&#39;re using Beta Censoring or Beta Safety.</p><h3 id="additional-features" tabindex="-1"><a class="header-anchor" href="#additional-features" aria-hidden="true">#</a> Additional features</h3><p>Beta Protection (at time of writing) supports largely the same features as Beta Safety, but includes a few extras of its own. For example, overrides can be used to enforce censoring options, and Beta Protection includes more fine-grained controls for on-demand censoring, among others.</p><h3 id="fully-open-source-and-more-extensible" tabindex="-1"><a class="header-anchor" href="#fully-open-source-and-more-extensible" aria-hidden="true">#</a> Fully open source, and more extensible</h3><p><strong>At the time of writing</strong>, Beta Safety is not open source and is difficult to modify even for developers. Beta Protection is fully open-source, published under the GPLv3 license on GitHub. It&#39;s also intended to be more scalable and flexible than Beta Safety is, as well as easier to integrate with other projects (like other backends).</p><hr><h2 id="known-issues-and-drawbacks" tabindex="-1"><a class="header-anchor" href="#known-issues-and-drawbacks" aria-hidden="true">#</a> Known Issues and Drawbacks</h2><p>There are also some drawbacks to Beta Protection that you should know before you decide:</p><h4 id="dramatically-more-complex" tabindex="-1"><a class="header-anchor" href="#dramatically-more-complex" aria-hidden="true">#</a> Dramatically more complex</h4><p>There&#39;s just a lot of moving parts here. Beta Protection (by virtue of its design) is a much more complex and &quot;heavy&quot; tool than the packaged extension.</p><p>In general, this should balance out, but it&#39;s worth knowing going in.</p><h4 id="less-tested" tabindex="-1"><a class="header-anchor" href="#less-tested" aria-hidden="true">#</a> Less tested</h4><p>Beta Protection is a brand new project that just hasn&#39;t had as much time in the hands of users as the packaged extension. There might be some bugs I haven&#39;t caught yet. No real way around this.</p><h4 id="different-performance" tabindex="-1"><a class="header-anchor" href="#different-performance" aria-hidden="true">#</a> Different performance</h4><p>Beta Protection handles how it runs quite differently under the covers from Beta Safety which leads to both gains and losses in performance. Experiences will vary but <em>in general</em>, Beta Protection will be a little slower to censor images, but will be less performance intensive doing so.</p>',16);function b(y,w){const o=n("ExternalLinkIcon");return i(),r(d,null,[l,t("p",null,[u,t("a",f,[p,s(o)]),m]),g],64)}var k=h(c,[["render",b]]);export{k as default};
